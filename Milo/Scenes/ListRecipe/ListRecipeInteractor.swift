//
//  ListRecipeInteractor.swift
//  Milo
//
//  Created by Eldon Chan on 3/28/18.
//  Copyright (c) 2018 ByEldon. All rights reserved.
// 
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListRecipeBusinessLogic {
    func fetchRecipes(request: ListRecipe.FetchRecipes.Request)
    func addRecipe(indexPath: Int, request: ListRecipe.AddRecipe.Request)
}

protocol ListRecipeDataStore {
    var recipes: [Recipe]? { get }
}

class ListRecipeInteractor: ListRecipeBusinessLogic, ListRecipeDataStore {
    
    var presenter: ListRecipePresentationLogic?
    var recipeWorker = RecipesWorkers(recipesStore: TestRecipe())
    var recipeAddWorker = RecipesWorkers(recipesStore: MyRecipeCoreDataStore())
    var recipes: [Recipe]?
    
    // MARK: Do something
    func fetchRecipes(request: ListRecipe.FetchRecipes.Request) {
        print("2. Fetch Recipe")
        recipeWorker.fetchRecipes { (recipes, error) in
            print("3. send response")
            self.recipes = recipes
            let response = ListRecipe.FetchRecipes.Response(recipes: recipes)
            self.presenter?.presentFetchedRecipes(response: response)
        }
        
    }
    
    func addRecipe(indexPath: Int, request: ListRecipe.AddRecipe.Request) {
        
        guard let recipe = recipes?[indexPath] else {return}
        MyRecipeCoreDataStore.shared.addToMyRecipes(recipeToAdd: recipe) { (recipe, error) in
            print("Clicked to attempt to add recipe")
        }
//        recipeAddWorker.addToMyRecipes(recipeToAdd: recipe) { (recipe, error) in
//            //
//            print("Clicked to attempt to add recipe")
//        }
        
    }
    
    
    
}
