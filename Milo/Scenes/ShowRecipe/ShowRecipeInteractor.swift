//
//  ShowRecipeInteractor.swift
//  Milo
//
//  Created by Eldon Chan on 4/2/18.
//  Copyright (c) 2018 ByEldon. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ShowRecipeBusinessLogic {
    func getRecipe(request: ShowRecipe.GetRecipe.Request)
    func addRecipe(request: ShowRecipe.AddRecipe.Request)
}

protocol ShowRecipeDataStore {
    var recipe: Recipe! { get set }
}

class ShowRecipeInteractor: ShowRecipeBusinessLogic, ShowRecipeDataStore {
    
    var presenter: ShowRecipePresentationLogic?
    var worker: ShowRecipeWorker?
    var recipe: Recipe!
    
    // MARK: Do something
    
    func getRecipe(request: ShowRecipe.GetRecipe.Request) {
        
        let response = ShowRecipe.GetRecipe.Response(recipe: recipe)
        presenter?.presentRecipe(response: response)
    }
    
    func addRecipe(request: ShowRecipe.AddRecipe.Request) {
        
        let response: ShowRecipe.AddRecipe.Response
        
        if checkIfAdded(recipetoAdd: recipe) == false {
            MyRecipeCoreDataStore.shared.addToMyRecipes(recipeToAdd: recipe) { (recipe, error) in
                
            }
            response = ShowRecipe.AddRecipe.Response(isAdded: false)
        } else {
            print("Already favorited!")
            response = ShowRecipe.AddRecipe.Response(isAdded: true)
        }
        
        self.presenter?.presentAlert(response: response)
    }
    
    func checkIfAdded(recipetoAdd: Recipe) -> Bool{
        
        var isAdded = false
        
        MyRecipeCoreDataStore.shared.fetchRecipes { (recipes, error) in
            for recipe in recipes {
                if recipe.name == recipetoAdd.name {
                    isAdded = true
                }
            }
        }
        
        return isAdded
    }
    
}
